# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'analysis_excel.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import glob
import os

from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
from PyQt5.QtWidgets import QFileDialog, qApp
from matplotlib import pyplot as plt

def save_excel(execl_extract_columns, checked):
    if checked:
        # current_dir
        writer = pd.ExcelWriter("execl_data.xls")
    else:
        # definition_dir
        pass
    # exchange_data_to_writer
    execl_extract_columns.to_excel(writer, "sheet_name1")
    # write_the_data
    writer.save()
    print("ok")


class Ui_MainWindow(QtWidgets.QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(915, 700)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("D:\\Pycharm\\PyTorch\\book\\test\\14\\execute_analysis\\image\\贡献度分析.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setEnabled(False)
        self.label.setGeometry(QtCore.QRect(10, 410, 60, 16))
        self.label.setObjectName("label")
        self.rButton1 = QtWidgets.QRadioButton(self.centralwidget)
        self.rButton1.setGeometry(QtCore.QRect(20, 440, 147, 19))
        self.rButton1.setChecked(True)
        self.rButton1.setObjectName("rButton1")
        self.rButton2 = QtWidgets.QRadioButton(self.centralwidget)
        self.rButton2.setGeometry(QtCore.QRect(22, 515, 117, 19))
        self.rButton2.setObjectName("rButton2")
        self.text1 = QtWidgets.QTextEdit(self.centralwidget)
        self.text1.setGeometry(QtCore.QRect(150, 510, 551, 31))
        self.text1.setObjectName("text1")
        self.viewButton = QtWidgets.QPushButton(self.centralwidget)
        self.viewButton.setGeometry(QtCore.QRect(730, 510, 93, 28))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.viewButton.setFont(font)
        self.viewButton.setObjectName("viewButton")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 831, 391))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.list1 = QtWidgets.QListView(self.frame)
        self.list1.setGeometry(QtCore.QRect(0, 0, 200, 390))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.list1.sizePolicy().hasHeightForWidth())
        self.list1.setSizePolicy(sizePolicy)
        self.list1.setBaseSize(QtCore.QSize(200, 390))
        self.list1.setObjectName("list1")
        self.textEdit = QtWidgets.QTextEdit(self.frame)
        self.textEdit.setGeometry(QtCore.QRect(201, 0, 630, 390))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.textEdit.sizePolicy().hasHeightForWidth())
        self.textEdit.setSizePolicy(sizePolicy)
        self.textEdit.setSizeIncrement(QtCore.QSize(599, 390))
        self.textEdit.setBaseSize(QtCore.QSize(599, 390))
        self.textEdit.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.textEdit.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.textEdit.setObjectName("textEdit")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(200, 0, 1, 390))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.line.sizePolicy().hasHeightForWidth())
        self.line.setSizePolicy(sizePolicy)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 915, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.button1 = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("image/图标-01.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.button1.setIcon(icon1)
        self.button1.setObjectName("button1")
        self.button2 = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("image/图标-02.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.button2.setIcon(icon2)
        self.button2.setObjectName("button2")
        self.button3 = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("image/图标-03.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.button3.setIcon(icon3)
        self.button3.setObjectName("button3")
        self.button4 = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("image/图标-04.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.button4.setIcon(icon4)
        self.button4.setObjectName("button4")
        self.button5 = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("image/图标-05.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.button5.setIcon(icon5)
        self.button5.setObjectName("button5")
        self.button6 = QtWidgets.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("image/图标-06.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.button6.setIcon(icon6)
        self.button6.setObjectName("button6")
        self.button7 = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("image/图标-07.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.button7.setIcon(icon7)
        self.button7.setObjectName("button7")
        self.toolBar.addAction(self.button1)
        self.toolBar.addAction(self.button2)
        self.toolBar.addAction(self.button3)
        self.toolBar.addAction(self.button4)
        self.toolBar.addAction(self.button5)
        self.toolBar.addAction(self.button6)
        self.toolBar.addAction(self.button7)

        self.button1.triggered.connect(self.click1)
        self.list1.clicked.connect(self.clicked)
        self.button2.triggered.connect(self.click2)
        self.button3.triggered.connect(self.click3)
        self.button4.triggered.connect(self.click4)
        self.button5.triggered.connect(self.click5)
        self.button7.triggered.connect(qApp.quit)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "AnalysisExcel"))
        self.label.setText(_translate("MainWindow", "输出选项"))
        self.rButton1.setText(_translate("MainWindow", "保存在原文件夹内"))
        self.rButton2.setText(_translate("MainWindow", "自定义文件夹"))
        self.viewButton.setText(_translate("MainWindow", "浏览"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.button1.setText(_translate("MainWindow", "InputExcel123"))
        self.button1.setToolTip(_translate("MainWindow", "导入EXECEL"))
        self.button2.setText(_translate("MainWindow", "ExtractData"))
        self.button2.setToolTip(_translate("MainWindow", "提取列数据"))
        self.button3.setText(_translate("MainWindow", "DirectionalExtract"))
        self.button3.setToolTip(_translate("MainWindow", "定向筛选"))
        self.button4.setText(_translate("MainWindow", "MultiConcatStatistics"))
        self.button4.setToolTip(_translate("MainWindow", "多表合并"))
        self.button5.setText(_translate("MainWindow", "MultiConcatStatisticsOrder"))
        self.button5.setToolTip(_translate("MainWindow", "多表统计排行"))
        self.button6.setText(_translate("MainWindow", "GenerateGraph"))
        self.button6.setToolTip(_translate("MainWindow", "生成图表"))
        self.button7.setText(_translate("MainWindow", "Exit"))
        self.button7.setToolTip(_translate("MainWindow", "退出"))

    def click1(self):
        global root_path
        #  choose from the root_dir
        # root_path = QFileDialog.getExistingDirectory(self,caption="请选择文件夹",directory="/")
        # choose from the recent_dir
        root_path = QFileDialog.getExistingDirectory(self, caption="请选择文件夹")
        data_list = []
        print("root_path:{}".format(root_path))
        for dir_path, dir_names, file_names in os.walk(root_path):
            # obtain the file_name in the current_dir
            data_list.extend(file_names)
        # create the list_model in the list_view
        self.model = QtCore.QStringListModel()
        # add the model_str
        self.model.setStringList(data_list)
        # assign the model to the list_view_text
        self.list1.setModel(self.model)
        # use for the ui_display
        self.list1 = data_list

    def clicked(self, qt_model_data):
        global root_path
        global list_index
        list_index = qt_model_data.row()
        print(type(list_index))
        print(list_index)
        print(root_path)
        # path
        row_name_data = self.list1[list_index]
        row_name = str(row_name_data)
        row_execl_path = os.path.join(root_path, row_name)
        # read_data
        row_execl = pd.DataFrame(pd.read_excel(row_execl_path))
        # set_text
        str_execl = str(row_execl)
        self.textEdit.setText(str_execl)

    def click2(self):
        global root_path
        global list_index
        # path
        read_path = os.path.join(root_path, str(self.list1[list_index]))
        # read_data
        execl_data = pd.DataFrame(pd.read_excel(read_path))
        execl_extract_columns = execl_data[['买家会员名', '收货人姓名', '联系手机', '宝贝标题']]
        # set_text
        self.textEdit.setText(str(execl_extract_columns))
        save_excel(execl_extract_columns, self.rButton1.isChecked())

    def click3(self):
        global root_path
        global list_index
        # obtain the current_dir_file_name
        file_name_list = []
        location_file_names = glob.glob(root_path + "\*.xls")
        for path in location_file_names:
            file_name_list.append(path)
        # concact the dataframe
        base_data_frame = pd.read_excel(file_name_list[0])
        for abspath in file_name_list[1:]:
            read_data = pd.read_excel(abspath)
            base_data_frame = pd.concat([base_data_frame, read_data], ignore_index=False, sort=True)
        # extract the column
        extract_data = base_data_frame[['买家会员名', '收货人姓名', '联系手机', '宝贝标题']]
        # query the specify_column
        specify_column_df = extract_data.loc[extract_data["宝贝标题"] == "宝贝标题"]
        # set the text_data
        self.textEdit.setText(str(specify_column_df))
        # save_data
        save_excel(specify_column_df, self.rButton1.isChecked())
    def click4(self):
        # concact the current_dir_excel
        global root_path
        global list_index
        # obtain the current_dir_file_name
        file_name_list = []
        location_file_names = glob.glob(root_path + "\*.xls")
        for path in location_file_names:
            file_name_list.append(path)
        # concact the dataframe
        base_data_frame = pd.read_excel(file_name_list[0])
        for abspath in file_name_list[1:]:
            read_data = pd.read_excel(abspath)
            base_data_frame = pd.concat([base_data_frame, read_data], ignore_index=False, sort=True)
        # set the text_data
        data_index=base_data_frame.index
        self.textEdit.setText(str(data_index))
        # save_data
        save_excel(base_data_frame, self.rButton1.isChecked())

    def click5(self):
        # statistics the current_dir_excel
        global root_path
        global list_index
        # obtain the current_dir_file_name
        file_name_list = []
        location_file_names = glob.glob(root_path + "\*.xls")
        for path in location_file_names:
            file_name_list.append(path)
        # concact the dataframe
        base_data_frame = pd.read_excel(file_name_list[0])
        for abspath in file_name_list[1:]:
            read_data = pd.read_excel(abspath)
            base_data_frame = pd.concat([base_data_frame, read_data], ignore_index=False, sort=True)
        # statistics by the group
        statistics_df=base_data_frame.groupby(["宝贝标题"])
        statistics_df1=base_data_frame.groupby(["宝贝标题"])["宝贝总数量"]
        statistics_sum_df=statistics_df.sum().reset_index()
        # set the text_data
        self.textEdit.setText(str(statistics_sum_df))
        # save_data
        save_excel(base_data_frame, self.rButton1.isChecked())

